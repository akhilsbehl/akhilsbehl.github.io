<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Read more on: emacs | asb: head /dev/brain > /dev/www]]></title>
  <link href="http://akhilsbehl.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://akhilsbehl.github.io/"/>
  <updated>2016-10-17T12:01:33+05:30</updated>
  <id>http://akhilsbehl.github.io/</id>
  <author>
    <name><![CDATA[Akhil S. Behl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Toggling buffer-level hooks in Emacs]]></title>
    <link href="http://akhilsbehl.github.io/blog/2016/09/07/toggling-buffer-level-hooks-in-emacs/"/>
    <updated>2016-09-07T18:19:05+05:30</updated>
    <id>http://akhilsbehl.github.io/blog/2016/09/07/toggling-buffer-level-hooks-in-emacs</id>
    <content type="html"><![CDATA[<p>One of the formats that I like to edit is markdown (yeah, yeah, I know about org-mode, shush!). Another thing that I like to do, when editing markdown, is to preview it in my browser as html. This can be done by exporting the markdown file to html each time the markdown buffer is written to. Now, I like this solution except when I don’t! To generalize the problem, one wants an action to be trigerred, perhaps for a major mode (or not), every time an event happens in a buffer. On the other hand, one also wants this behavior to be togglable at will. For example: convert all tabs to spaces, run a linter, compile a file etc every time an event occurs in the buffer.</p>

<p>The first sub-problem – of triggering the action – is solved easily using Emacs’ various <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html">hooks</a>. The second problem is also easily solved using a little lisp. Here’s how.</p>

<!--more-->

<h2 id="triggering-an-event">Triggering an event</h2>

<p>Let’s assume I have a lisp function called <code>special-behavior-function</code> handy that knows how to execute the special behavior on a buffer. I’d like to call this every time the even happens, say, I write to the buffer. Here’s how to do that:</p>

<p><code>lisp
(add-hook 'major-mode-hook ;; plug the appropriate major mode
  (lambda ()
    (add-hook 'special-event-hook ;; plug the appropriate hook
      'special-behavior-function ;; plug the appropriate function
      nil 'local)))
</code></p>

<p>The <code>'local</code> at the end makes sure that the hook is added local to the buffer. That’s usually a good thing. Change to <code>nil</code> if you don’t like it.</p>

<p>Now, this should be enough to solve the first subproblem. However, what if, sometimes, you want to turn this behavior off? Or having turned it off, you want to turn it back on?</p>

<h2 id="toggling-event-based-behavior">Toggling event-based behavior</h2>

<p>To achieve this, we introduce a <em>variable</em> to save our preference, a <em>wrapper function</em> to check against our current preference. and a <em>toggle function</em> to toggle this preference. (All this goes into your <code>.emacs</code>, duh!) All of this is done local to a buffer. This way, you can control the behavior for each buffer separately.</p>

<p>Disclaimer: this answer is <em>inspired</em> from <a href="http://stackoverflow.com/questions/14913398/in-emacs-how-do-i-save-without-running-save-hooks">this discussion</a> on SO. ;)</p>

<h3 id="configuration-variable">Configuration variable</h3>

<p><code>lisp
(defvar inhibit-special-behavior t) ;; Change t to nil to keep on by default
</code></p>

<h3 id="wrapper-function">Wrapper function</h3>

<p><code>lisp
(defun wrap-special-behavior-function () ;; try &amp;rest with apply if you need args
  (unless inhibit-special-behavior
    (special-behavior-function)))
</code></p>

<h3 id="toggle-function">Toggle function</h3>

<p><code>lisp
(defun toggle-special-behavior ()
  (interactive)
  (let ((this-buffer (current-buffer)))
    (if (buffer-local-value inhibit-special-behavior this-buffer)
      (progn
        (set (make-local-variable 'inhibit-special-behavior) nil)
        (message "special behavior uninhibited."))
      (progn
        (set (make-local-variable 'inhibit-special-behavior) t)
        (message "special behavior inhibited.")))))
</code></p>

<p>Now all you gotta do is either <code>M-x</code> this function when you need it or bind it to a key-sequence. See <a href="https://github.com/akhilsbehl/configs/blob/master/emacs#L642">this</a> and <a href="https://github.com/akhilsbehl/configs/blob/master/scripts/md2html">this</a> for the markdown export example that I’m personally using.</p>

<!--links-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inspecting objects at point with ESS]]></title>
    <link href="http://akhilsbehl.github.io/blog/2016/05/30/inspecting-objects-at-point-with-ess/"/>
    <updated>2016-05-30T13:34:32+05:30</updated>
    <id>http://akhilsbehl.github.io/blog/2016/05/30/inspecting-objects-at-point-with-ess</id>
    <content type="html"><![CDATA[<p>Somewhere in the second half of last year I switched my primary text editor from <a href="http://www.vim.org/">Vim</a> to <a href="https://www.gnu.org/software/emacs/">Emacs</a>. Calm down! I use <a href="https://www.emacswiki.org/emacs/Evil">Evil</a>. So, one of my primary languages is R and I was in love with this <a href="https://github.com/vim-scripts/Vim-R-plugin">plugin</a> in Vim. A snippet of my vim config that I used to rely heavily on in Vim was:</p>

<p>``` vim</p>

<p>map <LocalLeader>nr :call RAction("rownames")<CR>
map <LocalLeader>nc :call RAction("colnames")<CR>
map <LocalLeader>n2 :call RAction("names")<CR>
map <LocalLeader>nn :call RAction("dimnames")<CR>
map <LocalLeader>nd :call RAction("dim")<CR>
map <LocalLeader>nh :call RAction("head")<CR>
map <LocalLeader>nt :call RAction("tail")<CR>
map <LocalLeader>nl :call RAction("length")<CR>
map <LocalLeader>cc :call RAction("class")<CR></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></p>

<p>```</p>

<p>These commands were invented by me after looking at a similar usage pattern in the plugin’s manuals. Being able to inspect objects at point without switching from my editor to the R prompt made me much more productive than when I could not do this. After I switched to Emacs and the mighty <a href="http://ess.r-project.org/">ESS</a> for programming in R, replicating this was an explicit TODO in my ESS configuration. Ladies &amp; gentlemen, today I bring you the solution. <em>Drumroll!</em></p>

<!--more-->

<p>The primary idea — <code>ess-command</code> wrapped with <code>popup-tip</code> — came from <a href="https://blogisticreflections.wordpress.com/2009/10/01/r-object-tooltips-in-ess/">this blog post</a> of yore and was wielded to magnificent effect by yours truly. (<em>Yes, I’m a megalomaniac, thank you very much.</em>)</p>

<p>Lemme show you <em>teh codez</em>.</p>

<p>``` lisp</p>

<p>;;; Show a popup by executing arbitrary commands on object at point.
;;; Inspiration:
;;; blogisticreflections.wordpress.com/2009/10/01/r-object-tooltips-in-ess/</p>

<p>;; emacs.stackexchange.com/questions/696/get-content-of-a-buffer
(defun asb-read-into-string (buffer)
  (with-current-buffer buffer
    (buffer-string)))</p>

<p>(defun asb-ess-R-object-popup (r-func)
  “R-FUNC: The R function to use on the object.
Run R-FUN for object at point, and display results in a popup.”
  (let ((objname (current-word))
        (tmpbuf (get-buffer-create “<strong>ess-R-object-popup</strong>”)))
    (if objname
        (progn
          (ess-command (concat “class(“ objname “)\n”) tmpbuf)
          (let ((bs (asb-read-into-string tmpbuf)))
            (if (not(string-match “(object .* not found)|unexpected” bs))
                (progn
                  (ess-command (concat r-func “(“ objname “)\n”) tmpbuf)
                  (let ((bs (asb-read-into-string tmpbuf)))
                    (popup-tip bs)))))))
  (kill-buffer tmpbuf)))</p>

<p>(defun asb-ess-R-object-popup-str ()
  (interactive)
  (asb-ess-R-object-popup “str”))</p>

<p>(defun asb-ess-R-object-popup-interactive (r-func)
  (interactive “sR function to execute: “)
  (asb-ess-R-object-popup r-func))</p>

<p>(evil-leader/set-key-for-mode ‘ess-mode “ei” ‘asb-ess-R-object-popup-str)
(evil-leader/set-key-for-mode ‘ess-mode “eI”
  ‘asb-ess-R-object-popup-interactive)</p>

<p>```</p>

<p>The function <code>asb-ess-R-object-popup</code> allows us to yank the word at point and execute an arbitrary function on it (without arguments) and display the output as a popup-tip. This function is wrapped into <code>asb-ess-R-object-popup-str</code> mapped to <code>&lt;leader&gt;ei</code> (<strong>e</strong>vil-<strong>e</strong>ss-<strong>i</strong>nspect) to inspect the <code>str</code> of the object interactively because this is what I use the most. Another function called <code>asb-ess-R-object-popup-interactive</code> mapped to <code>&lt;leader&gt;eI</code> (<strong>e</strong>vil-<strong>e</strong>ss-<strong>i</strong>nteractive-<strong>i</strong>nspect) asks the user what R function to inspect the object with. Common suspects will be <code>head</code>, <code>tail</code>, <code>names</code>, etc. You know the drill. Have a look at the <a href="https://www.youtube.com/watch?v=JwFjWHThIy4">video</a> and pay attention to the minibuffer.</p>

<p>PS: Actually, don’t bother watching the video; I don’t know why youtube insists on downgrading the video quality.</p>

<!--links-->
]]></content>
  </entry>
  
</feed>
