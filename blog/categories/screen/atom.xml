<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Read more on: screen | asb: head /dev/brain > /dev/www]]></title>
  <link href="http://akhilsbehl.github.io/blog/categories/screen/atom.xml" rel="self"/>
  <link href="http://akhilsbehl.github.io/"/>
  <updated>2016-09-08T12:45:15+05:30</updated>
  <id>http://akhilsbehl.github.io/</id>
  <author>
    <name><![CDATA[Akhil S. Behl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Send Python commands from Vim to IPython via tmux.]]></title>
    <link href="http://akhilsbehl.github.io/blog/2014/08/17/send-python-commands-from-vim-to-ipython-via-tmux/"/>
    <updated>2014-08-17T13:58:53+05:30</updated>
    <id>http://akhilsbehl.github.io/blog/2014/08/17/send-python-commands-from-vim-to-ipython-via-tmux</id>
    <content type="html"><![CDATA[<p>A few days ago I built a very simple framework (bunch of vimscript commands really) to work with <a href="http://en.wikipedia.org/wiki/Vim_%28text_editor%29">vim</a> and <a href="http://en.wikipedia.org/wiki/IPython">IPython</a> along the lines of the <a href="https://github.com/vim-scripts/Vim-R-plugin">Vim-R-Plugin</a>. In this post I show what I had to do to get this to work.</p>

<!--more-->

<h2 id="detour-vim-r-plugin">Detour: Vim R Plugin</h2>

<p>If you live in Vim and work with R (or hope / want to) there is <em>no better tool</em> to boost your producitivity than the marriage of these two tools as brought about in the Vim R Plugin. R was my first serious programming language (horror of horrors!) and I had gotten sold on the Vim R Plugin model of doing things very early on. The plugin provides you the whole shebang like any modern IDE such as syntax highlighting, completion based on namespaces and R environments, an object browser that opens in Vim.</p>

<p>However, I <strong>don’t</strong> use any of that fancy stuff. I tend to think of myself as a <em>simple man with simple needs</em>. The only thing I use the plugin to do is to send commands from Vim to R. Additionally, I wrote my own wrappers to execute my most frequent actions on R objects under the cursor in Vim. This makes me feel like I am always in the R console even when I am in Vim. And this is just the fluency I wanted in IPython with Vim. No bells and whistles, just make me feel like my editor understands my console and that is it.</p>

<p>Here is the chunk from my <a href="https://github.com/akhilsbehl/configs/blob/master/vimrc"><code>.vimrc</code></a> that is relevant for this plugin. Even if you are not as minimalistic as I am, you may yet find the ideas in these snippets useful:</p>

<p>```vim</p>

<p>” Custom commands.
map <LocalLeader>nr :call RAction("rownames")<CR>
map <LocalLeader>nc :call RAction("colnames")<CR>
map <LocalLeader>n2 :call RAction("names")<CR>
map <LocalLeader>nn :call RAction("dimnames")<CR>
map <LocalLeader>nd :call RAction("dim")<CR>
map <LocalLeader>nh :call RAction("head")<CR>
map <LocalLeader>nt :call RAction("tail")<CR>
map <LocalLeader>nl :call RAction("length")<CR>
map <LocalLeader>cc :call RAction("class")<CR>
map <LocalLeader>nw :call SendCmdToR("system('clear')")<CR>
map <LocalLeader>ne :call SendCmdToR("system('traceback()')")<CR>
map <LocalLeader>sb :call SendCmdToR("system.time({")<CR>
map <LocalLeader>se :call SendCmdToR("})")<CR>
map <LocalLeader>tt :call SendCmdToR("tt = ")<CR></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></p>

<p>```</p>

<p>The <code>RAction</code> commands work this way: vim will inspect the word under the cursor and call the specified command with that argument. For example, <code>,nr</code> (my <code>LocalLeader</code> gets mapped to <code>,</code>) gives me the <code>rownames</code> of whichever object I happen to be sitting at and so on.</p>

<p>The <code>SendCmdToR</code> commands are slightly different. These can be used to send arbitrary text to the R console. The last two are the most interesting to me. Whenever I want to time some arbitrary set of commands I would say <code>,sb</code> (<strong>s</strong>ystem.time <strong>b</strong>egin) which would start a <code>system.time({</code> expression block on my console. Then I send whichever R commands I want to time to the console and finish with <code>,se</code> (<strong>s</strong>ystem.time <strong>e</strong>nd) which will finish my expression and time it.</p>

<p>A lot of times when debugging R code I want to evaluate chunks of the body of my function / code into a temporary variable (<code>tt</code> by convention). The plugin allows me to send arbitrary visual selections from vim to R. Therefore, often I would say <code>,tt</code> to start a variable assignment expression and then send whatever chunk I want to evaluate to <code>tt</code> by selecting it visually and executing it.</p>

<h1 id="working-with-ipython-and-vim">Working with IPython and Vim</h1>

<p>I had been looking for a plugin which provides me a similar model for IPython since a long time to no avail. Things that I found either did too many things or did them too differently. I was making do with <code>%paste</code> from IPython for a long time. Even though that was usable, it always made the distinction between my editor and my console too painfully obvious. And then I revisited one of the plugins that I have known for a long time but never investigated in detail.</p>

<p>The <a href="https://github.com/ervandew/screen">Screen</a> plugin is a mighty lightweight and simple plugin (something that I already had as a dependency for – wait for it – Vim R Plugin) that allows you to send arbitrary commands from Vim running in a tmux split to an arbitrary console (think shell, lisp, ruby, whatever you want it to be). An hour of RTFM and experimentation later I had hacked out a simple usable framework. This is a preview of that. I am pretty sure I will hack it to make this more usable over time (perhaps to match my muscle memory for the Vim R Plugin). All changes should get reflected in my vimrc <a href="https://github.com/akhilsbehl/configs/blob/master/vimrc">here</a>.</p>

<p>This is the first time I wrote any serious VimScript. I know this is kludgy but please bear with me.</p>

<p>```vim</p>

<p>” ervandew/screen configuration to send commands to ipython.</p>

<p>let g:ScreenImpl = “Tmux”</p>

<p>” Open an ipython3 shell.
autocmd FileType python map <LocalLeader>p :ScreenShell! ipython3<CR></CR></LocalLeader></p>

<p>” Open an ipython2 shell.
autocmd FileType python map <LocalLeader>pp :ScreenShell! ipython2<CR></CR></LocalLeader></p>

<p>” Close whichever shell is running.
autocmd FileType python map <LocalLeader>q :ScreenQuit<CR></CR></LocalLeader></p>

<p>” Send current line to python and move to next line.
autocmd FileType python map <LocalLeader>r V:ScreenSend<CR>j</CR></LocalLeader></p>

<p>” Send visual selection to python and move to next line.
autocmd FileType python map <LocalLeader>v :ScreenSend<CR>`&gt;0j</CR></LocalLeader></p>

<p>” Send a carriage return line to python.
autocmd FileType python map <LocalLeader>a :call g:ScreenShellSend("\r")<CR></CR></LocalLeader></p>

<p>” Clear screen.
autocmd FileType python map <LocalLeader>L
      \ :call g:ScreenShellSend('!clear')<CR></CR></LocalLeader></p>

<p>” Start a time block to execute code in.
autocmd FileType python map <LocalLeader>t
      \ :call g:ScreenShellSend('%%time')<CR></CR></LocalLeader></p>

<p>” Start a timeit block to execute code in.
autocmd FileType python map <LocalLeader>tt
      \ :call g:ScreenShellSend('%%timeit')<CR></CR></LocalLeader></p>

<p>” Start a debugger repl to execute code in.
autocmd FileType python map <LocalLeader>db
      \ :call g:ScreenShellSend('%%debug')<CR></CR></LocalLeader></p>

<p>” Start a profiling block to execute code in.
autocmd FileType python map <LocalLeader>pr
      \ :call g:ScreenShellSend('%%prun')<CR></CR></LocalLeader></p>

<p>” Print the current working directory.
autocmd FileType python map <LocalLeader>gw
      \ :call g:ScreenShellSend('!pwd')<CR></CR></LocalLeader></p>

<p>” Set working directory to current file’s folder.
function SetWD()
  let wd = ‘!cd ‘ . expand(‘%:p:h’)
  :call g:ScreenShellSend(wd)
endfunction
autocmd FileType python map <LocalLeader>sw :call SetWD()<CR></CR></LocalLeader></p>

<p>” Get ipython help for word under cursor. Complement it with Shift + K.
function GetHelp()
  let w = expand(“<cword>") . "??"
  :call g:ScreenShellSend(w)
endfunction
autocmd FileType python map <LocalLeader>h :call GetHelp()<CR></CR></LocalLeader></cword></p>

<p>” Get <code>dir</code> help for word under cursor.
function GetDir()
  let w = “dir(“ . expand(“<cword>") . ")"
  :call g:ScreenShellSend(w)
endfunction
autocmd FileType python map <LocalLeader>d :call GetDir()<CR></CR></LocalLeader></cword></p>

<p>” Get <code>dir</code> help for word under cursor.
function GetLen()
  let w = “len(“ . expand(“<cword>") . ")"
  :call g:ScreenShellSend(w)
endfunction
autocmd FileType python map <LocalLeader>l :call GetLen()<CR></CR></LocalLeader></cword></p>

<p>```</p>

<p>The <code>,,a</code> command to send just a carriage return is to complete an indented block when python expects an empty line, e.g. at the end of a <code>for</code> loop.</p>

<p>This opens the possibility of having a bunch of different languages that vim can understand and I can transfer my muscle memory to. I am quite excited.</p>

<!--links-->
]]></content>
  </entry>
  
</feed>
