<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Read more on: python | asb: head /dev/brain > /dev/www]]></title>
  <link href="http://akhilsbehl.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://akhilsbehl.github.io/"/>
  <updated>2016-10-17T12:01:33+05:30</updated>
  <id>http://akhilsbehl.github.io/</id>
  <author>
    <name><![CDATA[Akhil S. Behl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python's AST module: Bringing a gun to a knife fight!]]></title>
    <link href="http://akhilsbehl.github.io/blog/2016/05/19/pythons-ast-module-bringing-a-gun-to-a-knife-fight/"/>
    <updated>2016-05-19T16:22:54+05:30</updated>
    <id>http://akhilsbehl.github.io/blog/2016/05/19/pythons-ast-module-bringing-a-gun-to-a-knife-fight</id>
    <content type="html"><![CDATA[<p>So, I’ve been writing unit tests for some statistical code using [py.test][py.test]. One of the sweet things about py.test is that it gives you some cute [context specific comparison assertions][cute-assertions] where you can check a data structure with another.</p>

<p>The problem that I ran into is when using this with floating point numbers. A minimal (convoluted) example:</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>import pandas as pd</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>pd.np.random.seed(3141)
xx = pd.np.random.random(17)</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>print pd.np.percentile(xx, 25)
0.386739093187</p>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <h2 id="assert-0386739093187--pdnppercentilexx-25">assert 0.386739093187 == pd.np.percentile(xx, 25)</h2>
      <p>AssertionError                            Traceback (most recent call last)</p>
    </blockquote>
  </blockquote>
</blockquote>
<ipython-input-16-f6262184b4b6> in <module>()
----&gt; 1 assert 0.386739093187 == pd.np.percentile(xx, 25)

AssertionError: 

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'><span class='pullquote-right' data-pullquote='Disclaimer: Don’t try this at work! Even though I did.'>
</span><span class='line'>Now, this is not that annoying unless you wanna do this for complicated data structures such as dicts of lists of floats etc. and you want to use the assertion goodness that comes with `py.test`. And I had exactly this situation at hand. Disclaimer: Don't try this at work! Even though I did.
</span><span class='line'></span>
</span><span class='line'>
</span><span class='line'>I was thinking that it'd be easy as pie to do this in a lisp by traversing the structure with a lambda that will round all the floats. And then I figured that Python can do this for me using the [`AST`][ast] module. There is a good introduction to the module [here][ast-intro] and a discussion on _appropriate things to do with ASTs_ [here][ast-uses].
</span><span class='line'>
</span><span class='line'>So, here is what I ended up implementing (this is miles away from being safe to use) to solve the problem.
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>python

import ast
import codegen

class NumberRounder(ast.NodeTransformer):

    def __init__(self, digits):
        self.digits = digits

    def visit_Num(self, node):
        if isinstance(node.n, float):
            return ast.Num(round(node.n, self.digits))
        return node


def round_numbers_in(literal, digits=2):
    nr = NumberRounder(digits=digits)
    original_ast = ast.parse(str(literal))
    rewritten_ast = nr.visit(original_ast)
    rewritten_source = codegen.to_source(rewritten_ast)
    rewritten_literal = ast.literal_eval(rewritten_source)
    return rewritten_literal

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>And voila!
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>python

&gt;&gt;&gt; sample_complicated_literal = {
    'a': {
        'test': {
            'outliers': [0.074264470377902181, 0.83386867290874311],
            'quantiles': {
                'median': 0.090294684490804245,
                'upper_quartile': 0.46208167869977368,
                'lower_quartile': 0.082279577434353213,
                'minimum': 0.075867491789192387,
                'maximum': 0.75951127406694918
            }
        }, 'target': {
            'outliers': [0.90590397810859369, 0.074264470377902181],
            'quantiles': {
                'median': 0.51193055816399746,
                'upper_quartile': 0.83386867290874311,
                'lower_quartile': 0.38673909318708044,
                'minimum': 0.087088641668223832,
                'maximum': 0.90457554405068796
            }
        }
    }, 'c': {
        'test': {
            'outliers': [0.76596994956051723, 0.18885210718343348],
            'quantiles': {
                'median': 0.42025570188230343,
                'upper_quartile': 0.59311282572141033,
                'lower_quartile': 0.30455390453286846,
                'minimum': 0.2119924666533205,
                'maximum': 0.73139852479269585
            }
        }, 'target': {
            'outliers': [0.024942395243662818, 0.90001151823365477],
            'quantiles': {
                'median': 0.42025570188230343,
                'upper_quartile': 0.54953955294935286,
                'lower_quartile': 0.18885210718343348,
                'minimum': 0.057602330989601373,
                'maximum': 0.89242588191298255
            }
        }
    }
}

&gt;&gt;&gt; import pprint

&gt;&gt;&gt; pprint.pprint(round_numbers_in(sample_complicated_literal, digits=4))

{'a': {'target': {'outliers': [0.9059, 0.0743],
                'quantiles': {'lower_quartile': 0.3867,
                                'maximum': 0.9046,
                                'median': 0.5119,
                                'minimum': 0.0871,
                                'upper_quartile': 0.8339}},
    'test': {'outliers': [0.0743, 0.8339],
                'quantiles': {'lower_quartile': 0.0823,
                            'maximum': 0.7595,
                            'median': 0.0903,
                            'minimum': 0.0759,
                            'upper_quartile': 0.4621}}},
'c': {'target': {'outliers': [0.0249, 0.9],
                'quantiles': {'lower_quartile': 0.1889,
                                'maximum': 0.8924,
                                'median': 0.4203,
                                'minimum': 0.0576,
                                'upper_quartile': 0.5495}},
    'test': {'outliers': [0.766, 0.1889],
                'quantiles': {'lower_quartile': 0.3046,
                            'maximum': 0.7314,
                            'median': 0.4203,
                            'minimum': 0.212,
                            'upper_quartile': 0.5931}}}}

```


<!--links-->
[py.test]: https://pytest.org/latest/
[cute-assertions]: https://pytest.org/latest/assert.html#making-use-of-context-sensitive-comparisons
[ast]: https://docs.python.org/2/library/ast.html
[ast-intro]: http://eli.thegreenplace.net/2009/11/28/python-internals-working-with-python-asts
[ast-uses]: http://pyvideo.org/video/419/pycon-2011--what-would-you-do-with-an-ast
</module></ipython-input-16-f6262184b4b6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boggle solver: Linear and recursive search]]></title>
    <link href="http://akhilsbehl.github.io/blog/2015/02/14/boggle-solver-linear-and-recursive-search/"/>
    <updated>2015-02-14T15:03:17+05:30</updated>
    <id>http://akhilsbehl.github.io/blog/2015/02/14/boggle-solver-linear-and-recursive-search</id>
    <content type="html"><![CDATA[<p>I was recently introduced to a Boggle solver problem by a friend of mine. Put simply, given a boggle board of sixteen characters and a dictionary, the program needs to figure out how many words from the dictionary are possible on the boggle board. The one deviation from standard boggle is that adjacent moves restriction is relaxed, i.e. order is unimportant.</p>

<p>My <a href="https://github.com/akhilsbehl/boggle-scrabble">repository</a> on Github discusses the problem and the two solutions implemented and their tradeoffs in much more detail along with presenting the code. Do visit.</p>

<!--links-->
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Python commands from Vim to IPython via tmux.]]></title>
    <link href="http://akhilsbehl.github.io/blog/2014/08/17/send-python-commands-from-vim-to-ipython-via-tmux/"/>
    <updated>2014-08-17T13:58:53+05:30</updated>
    <id>http://akhilsbehl.github.io/blog/2014/08/17/send-python-commands-from-vim-to-ipython-via-tmux</id>
    <content type="html"><![CDATA[<p>A few days ago I built a very simple framework (bunch of vimscript commands really) to work with <a href="http://en.wikipedia.org/wiki/Vim_%28text_editor%29">vim</a> and <a href="http://en.wikipedia.org/wiki/IPython">IPython</a> along the lines of the <a href="https://github.com/vim-scripts/Vim-R-plugin">Vim-R-Plugin</a>. In this post I show what I had to do to get this to work.</p>

<!--more-->

<h2 id="detour-vim-r-plugin">Detour: Vim R Plugin</h2>

<p>If you live in Vim and work with R (or hope / want to) there is <em>no better tool</em> to boost your producitivity than the marriage of these two tools as brought about in the Vim R Plugin. R was my first serious programming language (horror of horrors!) and I had gotten sold on the Vim R Plugin model of doing things very early on. The plugin provides you the whole shebang like any modern IDE such as syntax highlighting, completion based on namespaces and R environments, an object browser that opens in Vim.</p>

<p>However, I <strong>don’t</strong> use any of that fancy stuff. I tend to think of myself as a <em>simple man with simple needs</em>. The only thing I use the plugin to do is to send commands from Vim to R. Additionally, I wrote my own wrappers to execute my most frequent actions on R objects under the cursor in Vim. This makes me feel like I am always in the R console even when I am in Vim. And this is just the fluency I wanted in IPython with Vim. No bells and whistles, just make me feel like my editor understands my console and that is it.</p>

<p>Here is the chunk from my <a href="https://github.com/akhilsbehl/configs/blob/master/vimrc"><code>.vimrc</code></a> that is relevant for this plugin. Even if you are not as minimalistic as I am, you may yet find the ideas in these snippets useful:</p>

<p>```vim</p>

<p>” Custom commands.
map <LocalLeader>nr :call RAction("rownames")<CR>
map <LocalLeader>nc :call RAction("colnames")<CR>
map <LocalLeader>n2 :call RAction("names")<CR>
map <LocalLeader>nn :call RAction("dimnames")<CR>
map <LocalLeader>nd :call RAction("dim")<CR>
map <LocalLeader>nh :call RAction("head")<CR>
map <LocalLeader>nt :call RAction("tail")<CR>
map <LocalLeader>nl :call RAction("length")<CR>
map <LocalLeader>cc :call RAction("class")<CR>
map <LocalLeader>nw :call SendCmdToR("system('clear')")<CR>
map <LocalLeader>ne :call SendCmdToR("system('traceback()')")<CR>
map <LocalLeader>sb :call SendCmdToR("system.time({")<CR>
map <LocalLeader>se :call SendCmdToR("})")<CR>
map <LocalLeader>tt :call SendCmdToR("tt = ")<CR></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></CR></LocalLeader></p>

<p>```</p>

<p>The <code>RAction</code> commands work this way: vim will inspect the word under the cursor and call the specified command with that argument. For example, <code>,nr</code> (my <code>LocalLeader</code> gets mapped to <code>,</code>) gives me the <code>rownames</code> of whichever object I happen to be sitting at and so on.</p>

<p>The <code>SendCmdToR</code> commands are slightly different. These can be used to send arbitrary text to the R console. The last two are the most interesting to me. Whenever I want to time some arbitrary set of commands I would say <code>,sb</code> (<strong>s</strong>ystem.time <strong>b</strong>egin) which would start a <code>system.time({</code> expression block on my console. Then I send whichever R commands I want to time to the console and finish with <code>,se</code> (<strong>s</strong>ystem.time <strong>e</strong>nd) which will finish my expression and time it.</p>

<p>A lot of times when debugging R code I want to evaluate chunks of the body of my function / code into a temporary variable (<code>tt</code> by convention). The plugin allows me to send arbitrary visual selections from vim to R. Therefore, often I would say <code>,tt</code> to start a variable assignment expression and then send whatever chunk I want to evaluate to <code>tt</code> by selecting it visually and executing it.</p>

<h1 id="working-with-ipython-and-vim">Working with IPython and Vim</h1>

<p>I had been looking for a plugin which provides me a similar model for IPython since a long time to no avail. Things that I found either did too many things or did them too differently. I was making do with <code>%paste</code> from IPython for a long time. Even though that was usable, it always made the distinction between my editor and my console too painfully obvious. And then I revisited one of the plugins that I have known for a long time but never investigated in detail.</p>

<p>The <a href="https://github.com/ervandew/screen">Screen</a> plugin is a mighty lightweight and simple plugin (something that I already had as a dependency for – wait for it – Vim R Plugin) that allows you to send arbitrary commands from Vim running in a tmux split to an arbitrary console (think shell, lisp, ruby, whatever you want it to be). An hour of RTFM and experimentation later I had hacked out a simple usable framework. This is a preview of that. I am pretty sure I will hack it to make this more usable over time (perhaps to match my muscle memory for the Vim R Plugin). All changes should get reflected in my vimrc <a href="https://github.com/akhilsbehl/configs/blob/master/vimrc">here</a>.</p>

<p>This is the first time I wrote any serious VimScript. I know this is kludgy but please bear with me.</p>

<p>```vim</p>

<p>” ervandew/screen configuration to send commands to ipython.</p>

<p>let g:ScreenImpl = “Tmux”</p>

<p>” Open an ipython3 shell.
autocmd FileType python map <LocalLeader>p :ScreenShell! ipython3<CR></CR></LocalLeader></p>

<p>” Open an ipython2 shell.
autocmd FileType python map <LocalLeader>pp :ScreenShell! ipython2<CR></CR></LocalLeader></p>

<p>” Close whichever shell is running.
autocmd FileType python map <LocalLeader>q :ScreenQuit<CR></CR></LocalLeader></p>

<p>” Send current line to python and move to next line.
autocmd FileType python map <LocalLeader>r V:ScreenSend<CR>j</CR></LocalLeader></p>

<p>” Send visual selection to python and move to next line.
autocmd FileType python map <LocalLeader>v :ScreenSend<CR>`&gt;0j</CR></LocalLeader></p>

<p>” Send a carriage return line to python.
autocmd FileType python map <LocalLeader>a :call g:ScreenShellSend("\r")<CR></CR></LocalLeader></p>

<p>” Clear screen.
autocmd FileType python map <LocalLeader>L
      \ :call g:ScreenShellSend('!clear')<CR></CR></LocalLeader></p>

<p>” Start a time block to execute code in.
autocmd FileType python map <LocalLeader>t
      \ :call g:ScreenShellSend('%%time')<CR></CR></LocalLeader></p>

<p>” Start a timeit block to execute code in.
autocmd FileType python map <LocalLeader>tt
      \ :call g:ScreenShellSend('%%timeit')<CR></CR></LocalLeader></p>

<p>” Start a debugger repl to execute code in.
autocmd FileType python map <LocalLeader>db
      \ :call g:ScreenShellSend('%%debug')<CR></CR></LocalLeader></p>

<p>” Start a profiling block to execute code in.
autocmd FileType python map <LocalLeader>pr
      \ :call g:ScreenShellSend('%%prun')<CR></CR></LocalLeader></p>

<p>” Print the current working directory.
autocmd FileType python map <LocalLeader>gw
      \ :call g:ScreenShellSend('!pwd')<CR></CR></LocalLeader></p>

<p>” Set working directory to current file’s folder.
function SetWD()
  let wd = ‘!cd ‘ . expand(‘%:p:h’)
  :call g:ScreenShellSend(wd)
endfunction
autocmd FileType python map <LocalLeader>sw :call SetWD()<CR></CR></LocalLeader></p>

<p>” Get ipython help for word under cursor. Complement it with Shift + K.
function GetHelp()
  let w = expand(“<cword>") . "??"
  :call g:ScreenShellSend(w)
endfunction
autocmd FileType python map <LocalLeader>h :call GetHelp()<CR></CR></LocalLeader></cword></p>

<p>” Get <code>dir</code> help for word under cursor.
function GetDir()
  let w = “dir(“ . expand(“<cword>") . ")"
  :call g:ScreenShellSend(w)
endfunction
autocmd FileType python map <LocalLeader>d :call GetDir()<CR></CR></LocalLeader></cword></p>

<p>” Get <code>dir</code> help for word under cursor.
function GetLen()
  let w = “len(“ . expand(“<cword>") . ")"
  :call g:ScreenShellSend(w)
endfunction
autocmd FileType python map <LocalLeader>l :call GetLen()<CR></CR></LocalLeader></cword></p>

<p>```</p>

<p>The <code>,,a</code> command to send just a carriage return is to complete an indented block when python expects an empty line, e.g. at the end of a <code>for</code> loop.</p>

<p>This opens the possibility of having a bunch of different languages that vim can understand and I can transfer my muscle memory to. I am quite excited.</p>

<!--links-->
]]></content>
  </entry>
  
</feed>
